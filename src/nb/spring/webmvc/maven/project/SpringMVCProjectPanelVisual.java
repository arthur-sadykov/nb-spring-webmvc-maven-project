/*
 * Copyright (c) 2020 Arthur Sadykov.
 */
package nb.spring.webmvc.maven.project;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;

/**
 *
 * @author Arthur Sadykov
 */
public class SpringMVCProjectPanelVisual extends JPanel implements DocumentListener {

    public static final String PROP_PROJECT_NAME = "projectName";
    public static final String PROP_PACKAGE = "package";
    private static final String PROP_VERSION = "version";
    private static final String PROP_GROUP_ID = "groupId";
    private static final String PROP_ARTIFACT_ID = "artifactId";
    private static final String PROP_NAME = "name";
    private static final String PROP_PROJECT_DIR = "projdir";
    private static final String DEFAULT_PROJECT_NAME = "SpringWebMVCProject";
    private static final long serialVersionUID = 1L;
    private final SpringMVCProjectWizardPanel panel;

    private SpringMVCProjectPanelVisual(SpringMVCProjectWizardPanel panel) {
        initComponents();
        this.panel = panel;
    }

    public static SpringMVCProjectPanelVisual create(SpringMVCProjectWizardPanel panel) {
        SpringMVCProjectPanelVisual panelVisual = new SpringMVCProjectPanelVisual(panel);
        panelVisual.getProjectNameTextField().getDocument().addDocumentListener(panelVisual);
        panelVisual.getProjectLocationTextField().getDocument().addDocumentListener(panelVisual);
        panelVisual.getPackageTextField().getDocument().addDocumentListener(panelVisual);
        panelVisual.getArtifactIdTextField().getDocument().addDocumentListener(panelVisual);
        panelVisual.getGroupIdTextField().getDocument().addDocumentListener(panelVisual);
        panelVisual.getVersionTextField().getDocument().addDocumentListener(panelVisual);
        return panelVisual;
    }

    private JTextField getProjectLocationTextField() {
        return projectLocationTextField;
    }

    private JTextField getProjectNameTextField() {
        return projectNameTextField;
    }

    private JTextField getPackageTextField() {
        return packageTextField;
    }

    private JTextField getArtifactIdTextField() {
        return artifactIdTextField;
    }

    private JTextField getGroupIdTextField() {
        return groupIdTextField;
    }

    private JTextField getVersionTextField() {
        return versionTextField;
    }

    public String getProjectName() {
        return this.projectNameTextField.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectNameLabel = new javax.swing.JLabel();
        projectNameTextField = new javax.swing.JTextField();
        projectLocationLabel = new javax.swing.JLabel();
        projectLocationTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        createdFolderLabel = new javax.swing.JLabel();
        createdFolderTextField = new javax.swing.JTextField();
        packageLabel = new javax.swing.JLabel();
        packageTextField = new javax.swing.JTextField();
        artifactIdLabel = new javax.swing.JLabel();
        groupIdLabel = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();
        artifactIdTextField = new javax.swing.JTextField();
        groupIdTextField = new javax.swing.JTextField();
        versionTextField = new javax.swing.JTextField();

        projectNameLabel.setLabelFor(projectNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.projectNameLabel.text")); // NOI18N

        projectLocationLabel.setLabelFor(projectLocationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectLocationLabel, org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.projectLocationLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.browseButton.text")); // NOI18N
        browseButton.setActionCommand(org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.browseButton.actionCommand")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        createdFolderLabel.setLabelFor(createdFolderTextField);
        org.openide.awt.Mnemonics.setLocalizedText(createdFolderLabel, org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.createdFolderLabel.text")); // NOI18N

        createdFolderTextField.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(packageLabel, org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.packageLabel.text")); // NOI18N

        packageTextField.setText(org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.packageTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(artifactIdLabel, org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.artifactIdLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(groupIdLabel, org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.groupIdLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(versionLabel, org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.versionLabel.text")); // NOI18N

        artifactIdTextField.setText(org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.artifactIdTextField.text")); // NOI18N

        groupIdTextField.setText(org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.groupIdTextField.text")); // NOI18N

        versionTextField.setText(org.openide.util.NbBundle.getMessage(SpringMVCProjectPanelVisual.class, "SpringMVCProjectPanelVisual.versionTextField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(packageTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectNameLabel)
                            .addComponent(projectLocationLabel)
                            .addComponent(createdFolderLabel)
                            .addComponent(artifactIdLabel)
                            .addComponent(groupIdLabel)
                            .addComponent(versionLabel)
                            .addComponent(packageLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectNameTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(projectLocationTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(createdFolderTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(artifactIdTextField)
                            .addComponent(groupIdTextField)
                            .addComponent(versionTextField))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLabel)
                    .addComponent(projectNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectLocationLabel)
                    .addComponent(projectLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createdFolderLabel)
                    .addComponent(createdFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(artifactIdLabel)
                    .addComponent(artifactIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(groupIdLabel)
                    .addComponent(groupIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(versionLabel)
                    .addComponent(versionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(packageLabel)
                    .addComponent(packageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(110, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        String command = evt.getActionCommand();
        if ("BROWSE".equals(command)) {
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle("Select Project Location");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            String path = this.projectLocationTextField.getText();
            if (path.length() > 0) {
                File f = new File(path);
                if (f.exists()) {
                    chooser.setSelectedFile(f);
                }
            }
            if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
                File projectDir = chooser.getSelectedFile();
                projectLocationTextField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
            }
            panel.fireChangeEvent();
        }
    }//GEN-LAST:event_browseButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel artifactIdLabel;
    private javax.swing.JTextField artifactIdTextField;
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel createdFolderLabel;
    private javax.swing.JTextField createdFolderTextField;
    private javax.swing.JLabel groupIdLabel;
    private javax.swing.JTextField groupIdTextField;
    private javax.swing.JLabel packageLabel;
    private javax.swing.JTextField packageTextField;
    private javax.swing.JLabel projectLocationLabel;
    private javax.swing.JTextField projectLocationTextField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JTextField projectNameTextField;
    private javax.swing.JLabel versionLabel;
    private javax.swing.JTextField versionTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        projectNameTextField.requestFocus();
    }

    boolean valid(WizardDescriptor wizardDescriptor) {
        if (projectNameTextField.getText().isEmpty()) {
            wizardDescriptor
                    .putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Project Name is not a valid folder name.");
            return false;
        }
        File f = FileUtil.normalizeFile(new File(projectLocationTextField.getText()).getAbsoluteFile());
        if (!f.isDirectory()) {
            String message = "Project Folder is not a valid path.";
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
            return false;
        }
        final File destFolder = FileUtil.normalizeFile(new File(createdFolderTextField.getText()).getAbsoluteFile());
        File projLoc = destFolder;
        while (projLoc != null && !projLoc.exists()) {
            projLoc = projLoc.getParentFile();
        }
        if (projLoc == null || !projLoc.canWrite()) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage",
                    "Project Folder cannot be created.");
            return false;
        }
        if (FileUtil.toFileObject(projLoc) == null) {
            String message = "Project Folder is not a valid path.";
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
            return false;
        }
        File[] kids = destFolder.listFiles();
        if (destFolder.exists() && kids != null && kids.length > 0) {
            // Folder exists and is not empty
            wizardDescriptor.putProperty("WizardPanel_errorMessage",
                    "Project Folder already exists and is not empty.");
            return false;
        }
        if (packageTextField.getText().isEmpty()) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Package is not a valid identifier.");
            return false;
        }
        if (artifactIdTextField.getText().isEmpty()) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Artifact Id is not a valid identifier.");
            return false;
        }
        if (groupIdTextField.getText().isEmpty()) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Group Id is not a valid identifier.");
            return false;
        }
        if (versionTextField.getText().isEmpty()) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "Version is not a valid identifier.");
            return false;
        }
        wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
        return true;
    }

    void store(WizardDescriptor wizard) {
        String name = projectNameTextField.getText().trim();
        String folder = createdFolderTextField.getText().trim();
        String packageName = packageTextField.getText().trim();
        String artifactId = artifactIdTextField.getText().trim();
        String groupId = groupIdTextField.getText().trim();
        String version = versionTextField.getText().trim();
        wizard.putProperty(PROP_PROJECT_DIR, new File(folder));
        wizard.putProperty(PROP_NAME, name);
        wizard.putProperty(PROP_PACKAGE, packageName);
        wizard.putProperty(PROP_ARTIFACT_ID, artifactId);
        wizard.putProperty(PROP_GROUP_ID, groupId);
        wizard.putProperty(PROP_VERSION, version);
    }

    void read(WizardDescriptor settings) {
        File projectLocation = (File) settings.getProperty(PROP_PROJECT_DIR);
        if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile()
                .isDirectory()) {
            projectLocation = ProjectChooser.getProjectsFolder();
        } else {
            projectLocation = projectLocation.getParentFile();
        }
        projectLocationTextField.setText(projectLocation.getAbsolutePath());
        String packageName = (String) settings.getProperty(PROP_PACKAGE);
        packageTextField.setText(packageName);
        String artifactId = (String) settings.getProperty(PROP_ARTIFACT_ID);
        artifactIdTextField.setText(artifactId);
        String groupId = (String) settings.getProperty(PROP_GROUP_ID);
        groupIdTextField.setText(groupId);
        String version = (String) settings.getProperty(PROP_VERSION);
        versionTextField.setText(version);
        String projectName = (String) settings.getProperty(PROP_NAME);
        if (projectName == null) {
            projectName = DEFAULT_PROJECT_NAME;
        }
        projectNameTextField.setText(projectName);
        projectNameTextField.selectAll();
    }

    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }

    // Implementation of DocumentListener --------------------------------------
    @Override
    public void changedUpdate(DocumentEvent e) {
        handlePropertyChange(e);
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        handlePropertyChange(e);
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        handlePropertyChange(e);
    }

    private void handlePropertyChange(DocumentEvent e) {
        updateTexts(e);
        if (projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME, null, projectNameTextField.getText());
        } else if (packageTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PACKAGE, null, packageTextField.getText());
        } else if (artifactIdTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_ARTIFACT_ID, null, artifactIdTextField.getText());
        } else if (groupIdTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_GROUP_ID, null, groupIdTextField.getText());
        } else if (versionTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_VERSION, null, versionTextField.getText());
        }
    }

    /**
     * Handles changes in the Project name and project directory,
     */
    private void updateTexts(DocumentEvent e) {
        Document document = e.getDocument();
        if (document == projectNameTextField.getDocument()) {
            String projectName = projectNameTextField.getText();
            String projectFolder = projectLocationTextField.getText();
            createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);
            artifactIdTextField.setText(projectName);
        } else if (document == projectLocationTextField.getDocument()) {
            String projectName = projectNameTextField.getText();
            String projectFolder = projectLocationTextField.getText();
            createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);
        } else if (document == artifactIdTextField.getDocument() || document == groupIdTextField.getDocument()) {
            String artifactId = artifactIdTextField.getText();
            String groupId = groupIdTextField.getText();
            if (!groupId.isEmpty() && !artifactId.isEmpty()) {
                packageTextField.setText(groupId + "." + artifactId);
            }
        }
        panel.fireChangeEvent();
    }
}
